from typing import Dict, List, Any, Optional

class CodebaseAnalyzer:
    def __init__(self, repo_url: Optional[str] = None, repo_path: Optional[str] = None, language: Optional[str] = None) -> None: ...
    def analyze(self, categories: Optional[List[str]] = None, output_format: str = "json", output_file: Optional[str] = None) -> Dict[str, Any]: ...
    def get_file_count(self) -> Dict[str, Any]: ...
    def get_files_by_language(self) -> Dict[str, Any]: ...
    def get_file_size_distribution(self) -> Dict[str, Any]: ...
    def get_directory_structure(self) -> Dict[str, Any]: ...
    def get_symbol_count(self) -> Dict[str, Any]: ...
    def get_symbol_type_distribution(self) -> Dict[str, Any]: ...
    def get_symbol_hierarchy(self) -> Dict[str, Any]: ...
    def get_top_level_vs_nested_symbols(self) -> Dict[str, Any]: ...
    def get_import_dependency_map(self) -> Dict[str, Any]: ...
    def get_external_vs_internal_dependencies(self) -> Dict[str, Any]: ...
    def get_circular_imports(self) -> Dict[str, Any]: ...
    def get_unused_imports(self) -> Dict[str, Any]: ...
    def get_module_coupling_metrics(self) -> Dict[str, Any]: ...
    def get_module_cohesion_analysis(self) -> Dict[str, Any]: ...
    def get_package_structure(self) -> Dict[str, Any]: ...
    def get_module_dependency_graph(self) -> Dict[str, Any]: ...
    def get_function_parameter_analysis(self) -> Dict[str, Any]: ...
    def get_return_type_analysis(self) -> Dict[str, Any]: ...
    def get_function_complexity_metrics(self) -> Dict[str, Any]: ...
    def get_call_site_tracking(self) -> Dict[str, Any]: ...
    def get_async_function_detection(self) -> Dict[str, Any]: ...
    def get_function_overload_analysis(self) -> Dict[str, Any]: ...
    def get_inheritance_hierarchy(self) -> Dict[str, Any]: ...
    def get_method_analysis(self) -> Dict[str, Any]: ...
    def get_attribute_analysis(self) -> Dict[str, Any]: ...
    def get_constructor_analysis(self) -> Dict[str, Any]: ...
    def get_interface_implementation_verification(self) -> Dict[str, Any]: ...
    def get_access_modifier_usage(self) -> Dict[str, Any]: ...
    def get_type_inference(self) -> Dict[str, Any]: ...
    def get_usage_tracking(self) -> Dict[str, Any]: ...
    def get_scope_analysis(self) -> Dict[str, Any]: ...
    def get_constant_vs_mutable_usage(self) -> Dict[str, Any]: ...
    def get_global_variable_detection(self) -> Dict[str, Any]: ...
    def get_type_alias_resolution(self) -> Dict[str, Any]: ...
    def get_generic_type_usage(self) -> Dict[str, Any]: ...
    def get_type_consistency_checking(self) -> Dict[str, Any]: ...
    def get_union_intersection_type_analysis(self) -> Dict[str, Any]: ...
    def get_function_call_relationships(self) -> Dict[str, Any]: ...
    def get_call_hierarchy_visualization(self) -> Dict[str, Any]: ...
    def get_entry_point_analysis(self) -> Dict[str, Any]: ...
    def get_dead_code_detection(self) -> Dict[str, Any]: ...
    def get_variable_usage_tracking(self) -> Dict[str, Any]: ...
    def get_data_transformation_paths(self) -> Dict[str, Any]: ...
    def get_input_output_parameter_analysis(self) -> Dict[str, Any]: ...
    def get_conditional_branch_analysis(self) -> Dict[str, Any]: ...
    def get_loop_structure_analysis(self) -> Dict[str, Any]: ...
    def get_exception_handling_paths(self) -> Dict[str, Any]: ...
    def get_return_statement_analysis(self) -> Dict[str, Any]: ...
    def get_symbol_reference_tracking(self) -> Dict[str, Any]: ...
    def get_usage_frequency_metrics(self) -> Dict[str, Any]: ...
    def get_cross_file_symbol_usage(self) -> Dict[str, Any]: ...
    def get_unused_functions(self) -> Dict[str, Any]: ...
    def get_unused_classes(self) -> Dict[str, Any]: ...
    def get_unused_variables(self) -> Dict[str, Any]: ...
    def get_similar_function_detection(self) -> Dict[str, Any]: ...
    def get_repeated_code_patterns(self) -> Dict[str, Any]: ...
    def get_refactoring_opportunities(self) -> Dict[str, Any]: ...
    def get_cyclomatic_complexity(self) -> Dict[str, Any]: ...
    def get_cognitive_complexity(self) -> Dict[str, Any]: ...
    def get_nesting_depth_analysis(self) -> Dict[str, Any]: ...
    def get_function_size_metrics(self) -> Dict[str, Any]: ...
    def get_naming_convention_consistency(self) -> Dict[str, Any]: ...
    def get_comment_coverage(self) -> Dict[str, Any]: ...
    def get_documentation_completeness(self) -> Dict[str, Any]: ...
    def get_code_formatting_consistency(self) -> Dict[str, Any]: ...
    def get_module_dependency_visualization(self) -> Dict[str, Any]: ...
    def get_symbol_dependency_visualization(self) -> Dict[str, Any]: ...
    def get_import_relationship_graphs(self) -> Dict[str, Any]: ...
    def get_function_call_visualization(self) -> Dict[str, Any]: ...
    def get_call_hierarchy_trees(self) -> Dict[str, Any]: ...
    def get_entry_point_flow_diagrams(self) -> Dict[str, Any]: ...
    def get_class_hierarchy_visualization(self) -> Dict[str, Any]: ...
    def get_symbol_relationship_diagrams(self) -> Dict[str, Any]: ...
    def get_package_structure_visualization(self) -> Dict[str, Any]: ...
    def get_code_complexity_heat_maps(self) -> Dict[str, Any]: ...
    def get_usage_frequency_visualization(self) -> Dict[str, Any]: ...
    def get_change_frequency_analysis(self) -> Dict[str, Any]: ...
    def get_decorator_usage_analysis(self) -> Dict[str, Any]: ...
    def get_dynamic_attribute_access_detection(self) -> Dict[str, Any]: ...
    def get_type_hint_coverage(self) -> Dict[str, Any]: ...
    def get_magic_method_usage(self) -> Dict[str, Any]: ...
    def get_type_definition_completeness(self) -> Dict[str, Any]: ...
    def get_jsx_tsx_component_analysis(self) -> Dict[str, Any]: ...
    def get_type_narrowing_pattern_detection(self) -> Dict[str, Any]: ...
    def get_monthly_commits(self) -> Dict[str, Any]: ...
    def calculate_cyclomatic_complexity(self) -> Dict[str, Any]: ...
    def cc_rank(self) -> Dict[str, Any]: ...
    def get_operators_and_operands(self) -> Dict[str, Any]: ...
    def calculate_halstead_volume(self) -> Dict[str, Any]: ...
    def count_lines(self) -> Dict[str, Any]: ...
    def calculate_maintainability_index(self) -> Dict[str, Any]: ...
    def get_maintainability_rank(self) -> Dict[str, Any]: ...

METRICS_CATEGORIES: Dict[str, List[str]]

def main() -> None: ...

